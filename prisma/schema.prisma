generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  SUPER_ADMIN
  ADMIN
  SUB_ADMIN
  ADVISOR
  RH
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_DELETION
}

model User {
  id               String     @id @default(uuid())
  username         String     @unique
  email            String     @unique
  password         String
  firstname        String
  lastname         String
  phone            String
  address          String
  profilePicture   String?
  emailVerified    Boolean    @default(false)
  firstLoginToken  String?    @unique
  firstLoginExpiry DateTime?
  status           UserStatus @default(ACTIVE)

  refreshTokens         RefreshToken[]
  roles                 UserToRole[]
  clientFiles           ClientFile[]
  Notification          Notification[]
  expenses              Expense[]
  salaries              Salary[]        @relation("Salary_Employee")
  leavesRequested       Leave[]         @relation("Leave_Employee")
  leavesReviewed        Leave[]         @relation("Leave_Reviewed")
  salaryAdvances        SalaryAdvance[] @relation("Advance_Employee")
  expensesCreator       Expense[]       @relation("Expense_Creator")
  salariesCreator       Salary[]        @relation("Salary_Creator")
  salaryAdvancesCreator SalaryAdvance[] @relation("Advance_Creator")

  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UserRole {
  id    String       @id @default(uuid())
  name  RoleEnum     @unique
  users UserToRole[]
}

model UserToRole {
  userId String
  roleId String

  user User     @relation(fields: [userId], references: [id])
  role UserRole @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ClientFile {
  id          String  @id @default(uuid())
  reference   String  @unique
  clientCode  String  @unique
  reason      String
  clientType  String
  nonResident Boolean

  lastName            String?
  firstName           String?
  email               String?
  maidenName          String?
  birthDate           DateTime?
  birthCity           String?
  birthCountry        String?
  identityType        String?
  identityNumber      String?
  nationality         String?
  legalRepresentative String?
  hasBankAccount      Boolean?
  taxIdNumber         String?
  taxCountry          String?

  homeAddress         String?
  postalAddress       String?
  taxResidenceCountry String?
  phoneNumbers        String?

  profession        String?
  businessSector    String?
  activityStartDate DateTime?
  activityArea      String?

  incomeSources          String?
  monthlyIncome          Float?
  incomeCurrency         String?
  fundsOriginDestination String?
  assets                 String?

  hasInternationalOps   Boolean?
  transactionCountries  String?
  transactionCurrencies String?

  offeredAccounts String?

  expectedOperations String?
  creditAmount       String?
  debitAmount        String?

  isPEP         Boolean?
  pepType       String?
  pepMandate    String?
  pepEndDate    DateTime?
  pepLinkType   String?
  pepLastName   String?
  pepFirstName  String?
  pepBirthDate  DateTime?
  pepBirthPlace String?

  riskLevel            String?
  classificationSource String?
  degradationReason    String?
  fatcaStatus          String?
  hasUsIndications     Boolean?
  usIndicationsDetails String?

  status                FileStatus @default(DRAFT)
  creatorId             String
  validatorAdminId      String?
  validatorSuperAdminId String?
  validationDateAdmin   DateTime?
  validationDateSuper   DateTime?
  rejectionReason       String?

  fundSources             String[]
  fundProviderName        String?
  fundProviderRelation    String?
  fundDonationExplanation String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  creator   User      @relation(fields: [creatorId], references: [id])
}

enum FileStatus {
  DRAFT
  IN_PROGRESS
  AWAITING_ADMIN_VALIDATION
  AWAITING_SUPERADMIN_VALIDATION
  REJECTED
  BEING_MODIFIED
  VALIDATED
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  targetUrl String?

  user User @relation(fields: [userId], references: [id])
}

enum ExpenseCategoryGroup {
  ADMINISTRATIVE
  MOBILITY
  MARKETING
  IT
  OPERATIONS
  LEGAL
  OTHER
}

enum ExpenseCategory {
  OFFICE_RENT
  OFFICE_CHARGES
  INTERNET
  OFFICE_SUPPLIES
  SOFTWARE_SUBSCRIPTIONS
  POSTAL_FEES
  INSURANCE
  LOCAL_TRANSPORT
  MILEAGE_REIMBURSEMENT
  FLIGHTS
  ACCOMMODATION
  PER_DIEM
  CAR_RENTAL
  MISSION_FEES
  ONLINE_ADS
  DESIGN
  PRINTING
  PHOTOGRAPHY
  SOCIAL_MEDIA
  PARTNERSHIPS
  WEBSITE
  SOFTWARE_DEV
  SERVER_HOSTING
  CYBERSECURITY
  HARDWARE_PURCHASE
  SOFTWARE_LICENSES
  TECH_EQUIPMENT
  BANK_FEES
  FREELANCE_FEES
  EXTERNAL_MISSIONS
  CERTIFICATION_FEES
  LEGAL_FEES
  ADMIN_REGISTRATION
  LICENSE_RENEWAL
  COMPLIANCE_FEES
  TAXES
  PENALTIES
  DONATIONS
  LOSSES
  ONE_TIME_PURCHASE
}

enum ValidationStatus {
  AWAITING_ADMIN_VALIDATION
  AWAITING_SUPERADMIN_VALIDATION
  VALIDATED
  REJECTED
}

model Expense {
  id          String               @id @default(uuid())
  amount      Float
  date        DateTime
  category    ExpenseCategory
  group       ExpenseCategoryGroup
  description String?
  fileUrl     String?
  employeeId  String
  employee    User                 @relation(fields: [employeeId], references: [id])
  projectId   String?

  status                ValidationStatus @default(AWAITING_ADMIN_VALIDATION)
  validatedByAdmin      String?
  validatedBySuperAdmin String?
  rejectedReason        String?
  creatorId             String?
  creator               User?            @relation("Expense_Creator", fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SalaryPaymentMode {
  BANK_TRANSFER
  CASH
  MOBILE_MONEY
}

model Salary {
  id          String            @id @default(uuid())
  employeeId  String
  employee    User              @relation("Salary_Employee", fields: [employeeId], references: [id])
  grossSalary Float
  deductions  Float
  advances    Float
  netSalary   Float
  paymentMode SalaryPaymentMode
  paymentDate DateTime
  payslipUrl  String?
  year        String            @db.Char(4)
  month       String            @db.Char(2)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  status                ValidationStatus @default(AWAITING_ADMIN_VALIDATION)
  validatedByAdmin      String?
  validatedBySuperAdmin String?
  rejectedReason        String?
  creatorId             String?
  creator               User?            @relation("Salary_Creator", fields: [creatorId], references: [id])
}

enum LeaveType {
  ANNUAL
  SICK
  EXCEPTIONAL
  MATERNITY
  PATERNITY
  UNPAID
}

model Leave {
  id         String    @id @default(uuid())
  employeeId String
  employee   User      @relation("Leave_Employee", fields: [employeeId], references: [id])
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  comment    String?
  reviewedBy String?
  reviewed   User?     @relation("Leave_Reviewed", fields: [reviewedBy], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  status                ValidationStatus @default(AWAITING_ADMIN_VALIDATION)
  validatedByAdmin      String?
  validatedBySuperAdmin String?
  rejectedReason        String?
}

model SalaryAdvance {
  id            String   @id @default(uuid())
  amount        Float
  reason        String
  requestedDate DateTime
  employeeId    String
  employee      User     @relation("Advance_Employee", fields: [employeeId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  status                ValidationStatus @default(AWAITING_ADMIN_VALIDATION)
  validatedByAdmin      String?
  validatedBySuperAdmin String?
  rejectedReason        String?
  creatorId             String?
  creator               User?            @relation("Advance_Creator", fields: [creatorId], references: [id])
}
